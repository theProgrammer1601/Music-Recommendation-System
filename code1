import tkinter as tk
from tkinter import messagebox, ttk
import mysql.connector

# Global variable for database connection
conn = None

# Function to initialize the signup page
def initialize_signup_page():
    signup_window = tk.Toplevel(root)
    signup_window.title("User Signup")

    # Fetch available genres from the database
    genres = fetch_genres()

    # Create labels and entry fields for username and password
    tk.Label(signup_window, text="Username:").grid(row=0, column=0, padx=5, pady=5)
    entry_username_signup = tk.Entry(signup_window)
    entry_username_signup.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(signup_window, text="Password:").grid(row=1, column=0, padx=5, pady=5)
    entry_password_signup = tk.Entry(signup_window, show="*")
    entry_password_signup.grid(row=1, column=1, padx=5, pady=5)

    # Create dropdown menu for selecting preferred genre
    genre_label = tk.Label(signup_window, text="Select Preferred Genre:", font=("Helvetica", 12))
    genre_label.grid(row=2, column=0, columnspan=2, padx=5, pady=5)
    genre_var = tk.StringVar()
    genre_dropdown = ttk.Combobox(signup_window, textvariable=genre_var, values=genres)
    genre_dropdown.grid(row=3, column=0, columnspan=2, padx=5, pady=5)

    # Function to handle signup button click
    def signup_button_click():
        username = entry_username_signup.get()
        password = entry_password_signup.get()
        preferred_genre = genre_var.get()
        if not username or not password:
            messagebox.showwarning("Missing Information", "Please enter both username and password.")
            return
        if not preferred_genre:
            messagebox.showwarning("No Genre Selected", "Please select a preferred genre.")
            return
        user_id = user_signup(username, password, preferred_genre)
        if user_id:
            messagebox.showinfo("Signup Successful", "Welcome! You have successfully signed up.")
            initialize_recommendation_page(preferred_genre)
            signup_window.destroy()
            root.withdraw()
        else:
            messagebox.showerror("Signup Failed", "Failed to sign up.")

    # Create signup button with different color
    signup_button = tk.Button(signup_window, text="Signup", command=signup_button_click, bg="green")
    signup_button.grid(row=4, column=0, columnspan=2, padx=5, pady=10)

# Function to initialize the recommendation page
def initialize_recommendation_page(genre):
    recommendation_window = tk.Toplevel(root)
    recommendation_window.title("Music Recommendation")
    
    # Fetch available songs for the selected genre
    songs = fetch_songs_by_genre(genre)
    
    # Create listbox to display recommended songs
    song_listbox = tk.Listbox(recommendation_window, font=("Helvetica", 12), width=50)
    song_listbox.pack()
    
    # Display recommended songs
    if songs:
        for song in songs:
            song_listbox.insert(tk.END, f"{song[1]} - {song[2]}")
    else:
        messagebox.showwarning("No Songs", f"No songs found for genre: {genre}")

# Function to fetch available genres from the database
def fetch_genres():
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM genres")
        genres = [row[0] for row in cursor.fetchall()]
        cursor.close()
        return genres
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error accessing database: {err}")
        return []

# Function to fetch songs based on selected genre
def fetch_songs_by_genre(genre):
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM songs JOIN genres ON songs.genre_id = genres.id WHERE genres.name = %s", (genre,))
        songs = cursor.fetchall()
        cursor.close()
        return songs
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error accessing database: {err}")
        return []

# Function to handle user signup
def user_signup(username, password, preferred_genre):
    try:
        cursor = conn.cursor()
        # Check if the username already exists
        cursor.execute("SELECT COUNT(*) FROM users WHERE username = %s", (username,))
        count = cursor.fetchone()[0]
        if count > 0:
            messagebox.showerror("Signup Failed", "Username already exists. Please choose a different one.")
            cursor.close()
            return None

        # Insert user into users table
        cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, password))
        user_id = cursor.lastrowid

        # Insert user's preferred genre into user_genre table
        cursor.execute("INSERT INTO user_genre (user_id, genre_id) SELECT %s, id FROM genres WHERE name = %s", (user_id, preferred_genre))

        conn.commit()
        cursor.close()
        return user_id
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error accessing database: {err}")
        return None

# Function to handle user login button click
def user_login_button_click():
    username = entry_username.get()
    password = entry_password.get()
    if not username or not password:
        messagebox.showwarning("Missing Information", "Please enter both username and password.")
        return
    user = user_login(username, password)
    if user:
        messagebox.showinfo("Login Successful", "Welcome!")
        root.withdraw()
        initialize_recommendation_page(user['preferred_genre'] if 'preferred_genre' in user else None) # Assuming user has a preferred genre
    else:
        messagebox.showerror("Login Failed", "Invalid username or password.")

# Function to handle user login
def user_login(username, password):
    try:
        cursor = conn.cursor()
        query = "SELECT * FROM users WHERE username = %s AND password = %s"
        cursor.execute(query, (username, password))
        user = cursor.fetchone()
        cursor.close()
        if user:
            # Check if the user has a preferred genre
            if len(user) > 3:  
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM genres WHERE id = %s", (user[3],))
                preferred_genre = cursor.fetchone()[0]
                cursor.close()
            else:
                preferred_genre = None
            return {'username': user[1], 'password': user[2], 'preferred_genre': preferred_genre}
        else:
            return None
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error accessing database: {err}")
        return None

# Function to close the connection and exit the application
def close_connection_and_exit():
    conn.close()
    root.destroy()

# Connect to MySQL database
try:
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="0108",
        database="music"
    )
except mysql.connector.Error as err:
    messagebox.showerror("Database Connection Error", f"Error connecting to database: {err}")
    exit()

# Create main window
root = tk.Tk()
root.title("Music Recommendation App")
root.configure(bg="lightblue")

# Get the screen width and height
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
window_width = int(screen_width * 0.75)
window_height = int(screen_height * 0.75)
root.geometry(f"{window_width}x{window_height}")

# Create login frame
frame_login = tk.Frame(root, bg="lightblue")
frame_login.pack(expand=True)

# Create login labels and entry fields
tk.Label(frame_login, text="Login", font=("Helvetica", 16), bg="lightblue").pack()
tk.Label(frame_login, text="Username:", bg="lightblue").pack()
entry_username = tk.Entry(frame_login)
entry_username.pack()

tk.Label(frame_login, text="Password:", bg="lightblue").pack()
entry_password = tk.Entry(frame_login, show="*")
entry_password.pack()

# Create login button with different color
button_user_login = tk.Button(frame_login, text="Login (User)", command=user_login_button_click, bg="blue", fg="white")
button_user_login.pack()


# Create signup button with different color
button_user_signup = tk.Button(frame_login, text="Signup (User)", command=initialize_signup_page, bg="green", fg="white")
button_user_signup.pack()

# Bind closing event to close_connection_and_exit function
root.protocol("WM_DELETE_WINDOW", close_connection_and_exit)

# Run the main event loop
root.mainloop()
